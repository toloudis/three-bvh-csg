{"mappings":"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","sources":["examples/geometry.js","node_modules/three/examples/jsm/math/MeshSurfaceSampler.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { MeshSurfaceSampler } from 'three/examples/jsm/math/MeshSurfaceSampler.js';\nimport {\n\tBrush,\n\tEvaluator,\n\tADDITION,\n\tSUBTRACTION,\n\tINTERSECTION,\n\tDIFFERENCE,\n} from '..';\n\nconst params = {\n\n\toperation: SUBTRACTION,\n\twireframe: false,\n\tdisplayBrushes: false,\n\tshadows: true,\n\tuseGroups: true,\n\n\trandomize: () => {\n\n\t\trandomizeBrushes();\n\t\tupdateCSG();\n\n\t}\n};\n\nlet renderer, camera, scene, controls, gui, outputContainer;\nlet bunnyBrush, brushes;\nlet material, surfaceSampler;\nlet resultObject, wireframeResult, light;\nlet csgEvaluator = new Evaluator();\ncsgEvaluator.attributes = [ 'position', 'normal' ];\ncsgEvaluator.useGroups = false;\n\nconst materialMap = new Map();\n\ninit();\n\nasync function init() {\n\n\tconst bgColor = 0x111111;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// lights\n\tlight = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 2, 1 );\n\tscene.add( light, new THREE.AmbientLight( 0xb0bec5, 0.1 ) );\n\n\t// shadows\n\tconst shadowCam = light.shadow.camera;\n\tlight.castShadow = true;\n\tlight.shadow.mapSize.setScalar( 4096 );\n\tlight.shadow.bias = 1e-5;\n\tlight.shadow.normalBias = 1e-2;\n\n\tshadowCam.left = shadowCam.bottom = - 2.5;\n\tshadowCam.right = shadowCam.top = 2.5;\n\tshadowCam.updateProjectionMatrix();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 0, 0.65, 2.5 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\t// floor\n\tconst floor = new THREE.Mesh( new THREE.PlaneBufferGeometry(), new THREE.ShadowMaterial( { opacity: 0.05 } ) );\n\tfloor.material.color.set( 0xE0F7FA );\n\tfloor.rotation.x = - Math.PI / 2;\n\tfloor.scale.setScalar( 10 );\n\tfloor.position.y = - 0.5;\n\tfloor.receiveShadow = true;\n\tscene.add( floor );\n\n\tconst gltf = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/stanford-bunny/bunny.glb' );\n\n\tconst geometry = gltf.scene.children[ 0 ].geometry;\n\tgeometry.computeVertexNormals();\n\n\t// initialize brushes\n\tbunnyBrush = new Brush( geometry, new THREE.MeshStandardMaterial() );\n\tbunnyBrush.position.y = - 0.5;\n\tbunnyBrush.updateMatrixWorld();\n\tbunnyBrush.receiveShadow = true;\n\tscene.add( bunnyBrush );\n\n\tmaterial = new THREE.MeshStandardMaterial();\n\tbrushes = [];\n\n\tsurfaceSampler = new MeshSurfaceSampler( bunnyBrush );\n\tsurfaceSampler.build();\n\n\tfor ( let i = 0; i < 50; i ++ ) {\n\n\t\tconst b = new Brush( new THREE.SphereBufferGeometry( 1, 15, 15 ), material );\n\t\tb.receiveShadow = true;\n\t\tscene.add( b );\n\t\tbrushes.push( b );\n\n\t}\n\n\t// initialize materials\n\tbunnyBrush.material.opacity = 0.15;\n\tbunnyBrush.material.transparent = true;\n\tbunnyBrush.material.depthWrite = false;\n\tbunnyBrush.material.polygonOffset = true;\n\tbunnyBrush.material.polygonOffsetFactor = 0.1;\n\tbunnyBrush.material.polygonOffsetUnits = 0.1;\n\tbunnyBrush.material.side = THREE.DoubleSide;\n\tbunnyBrush.material.premultipliedAlpha = true;\n\tbunnyBrush.material.color.set( 0xE0F7FA );\n\n\tmaterial.opacity = 0.15;\n\tmaterial.transparent = true;\n\tmaterial.depthWrite = false;\n\tmaterial.polygonOffset = true;\n\tmaterial.polygonOffsetFactor = 0.1;\n\tmaterial.polygonOffsetUnits = 0.1;\n\tmaterial.side = THREE.DoubleSide;\n\tmaterial.premultipliedAlpha = true;\n\tmaterial.roughness = 0.25;\n\tmaterial.color.set( 0x4DD0E1 );\n\n\t// create solid material equivalents\n\tlet mat;\n\tmat = bunnyBrush.material.clone();\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( bunnyBrush.material, mat );\n\n\tmat = material.clone();\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( material, mat );\n\n\t// add object displaying the result\n\tresultObject = new THREE.Mesh( new THREE.BufferGeometry(), new THREE.MeshStandardMaterial( {\n\t\troughness: 0.1,\n\t\tflatShading: false,\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetUnits: 1,\n\t\tpolygonOffsetFactor: 1,\n\t} ) );\n\tresultObject.castShadow = true;\n\tresultObject.receiveShadow = true;\n\tscene.add( resultObject );\n\n\t// add wireframe representation\n\twireframeResult = new THREE.Mesh( resultObject.geometry, new THREE.MeshBasicMaterial( {\n\t\twireframe: true,\n\t\tcolor: 0,\n\t\topacity: 0.15,\n\t\ttransparent: true,\n\t} ) );\n\twireframeResult.material.color.set( 0x001516 );\n\tscene.add( wireframeResult );\n\n\t// gui\n\tgui = new GUI();\n\tgui.add( params, 'operation', { ADDITION, SUBTRACTION, INTERSECTION, DIFFERENCE } ).onChange( () => {\n\n\t\tupdateCSG();\n\n\t} );\n\tgui.add( params, 'displayBrushes' );\n\tgui.add( params, 'shadows' );\n\tgui.add( params, 'wireframe' );\n\tgui.add( params, 'useGroups' ).onChange( updateCSG );\n\tgui.add( params, 'randomize' );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\trandomizeBrushes();\n\tupdateCSG();\n\trender();\n\n}\n\nfunction updateCSG() {\n\n\tconst startTime = window.performance.now();\n\tlet finalBrush = brushes[ 0 ];\n\tcsgEvaluator.useGroups = false;\n\tfor ( let i = 1, l = brushes.length; i < l; i ++ ) {\n\n\t\tconst b = brushes[ i ];\n\t\tfinalBrush = csgEvaluator.evaluate( finalBrush, b, ADDITION );\n\t\tfinalBrush.material = material;\n\n\t}\n\n\tcsgEvaluator.useGroups = params.useGroups;\n\tcsgEvaluator.evaluate( bunnyBrush, finalBrush, params.operation, resultObject );\n\tif ( params.useGroups ) {\n\n\t\tresultObject.material = resultObject.material.map( m => materialMap.get( m ) );\n\n\t} else {\n\n\t\tresultObject.material = materialMap.get( bunnyBrush.material );\n\n\t}\n\n\tconst deltaTime = window.performance.now() - startTime;\n\toutputContainer.innerText = `${ deltaTime.toFixed( 3 ) }ms`;\n\n}\n\nfunction randomizeBrushes() {\n\n\tfor ( let i = 0; i < brushes.length; i ++ ) {\n\n\t\tconst b = brushes[ i ];\n\t\tsurfaceSampler.sample( b.position );\n\t\tb.position.applyMatrix4( bunnyBrush.matrixWorld );\n\t\tb.scale.setScalar( THREE.MathUtils.lerp( 0.05, 0.15, Math.random() ) );\n\t\tb.updateMatrixWorld();\n\n\t}\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\twireframeResult.visible = params.wireframe;\n\tbunnyBrush.visible = params.displayBrushes;\n\tbrushes.forEach( b => b.visible = params.displayBrushes );\n\n\tlight.castShadow = params.shadows;\n\n\trenderer.render( scene, camera );\n\n}\n\n\n\n","import {\n\tTriangle,\n\tVector3\n} from 'three';\n\n/**\n * Utility class for sampling weighted random points on the surface of a mesh.\n *\n * Building the sampler is a one-time O(n) operation. Once built, any number of\n * random samples may be selected in O(logn) time. Memory usage is O(n).\n *\n * References:\n * - http://www.joesfer.com/?p=84\n * - https://stackoverflow.com/a/4322940/1314762\n */\n\nconst _face = new Triangle();\nconst _color = new Vector3();\n\nclass MeshSurfaceSampler {\n\n\tconstructor( mesh ) {\n\n\t\tlet geometry = mesh.geometry;\n\n\t\tif ( geometry.index ) {\n\n\t\t\tconsole.warn( 'THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry.' );\n\n\t\t\tgeometry = geometry.toNonIndexed();\n\n\t\t}\n\n\t\tthis.geometry = geometry;\n\t\tthis.randomFunction = Math.random;\n\n\t\tthis.positionAttribute = this.geometry.getAttribute( 'position' );\n\t\tthis.colorAttribute = this.geometry.getAttribute( 'color' );\n\t\tthis.weightAttribute = null;\n\n\t\tthis.distribution = null;\n\n\t}\n\n\tsetWeightAttribute( name ) {\n\n\t\tthis.weightAttribute = name ? this.geometry.getAttribute( name ) : null;\n\n\t\treturn this;\n\n\t}\n\n\tbuild() {\n\n\t\tconst positionAttribute = this.positionAttribute;\n\t\tconst weightAttribute = this.weightAttribute;\n\n\t\tconst faceWeights = new Float32Array( positionAttribute.count / 3 );\n\n\t\t// Accumulate weights for each mesh face.\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tlet faceWeight = 1;\n\n\t\t\tif ( weightAttribute ) {\n\n\t\t\t\tfaceWeight = weightAttribute.getX( i )\n\t\t\t\t\t+ weightAttribute.getX( i + 1 )\n\t\t\t\t\t+ weightAttribute.getX( i + 2 );\n\n\t\t\t}\n\n\t\t\t_face.a.fromBufferAttribute( positionAttribute, i );\n\t\t\t_face.b.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t_face.c.fromBufferAttribute( positionAttribute, i + 2 );\n\t\t\tfaceWeight *= _face.getArea();\n\n\t\t\tfaceWeights[ i / 3 ] = faceWeight;\n\n\t\t}\n\n\t\t// Store cumulative total face weights in an array, where weight index\n\t\t// corresponds to face index.\n\n\t\tthis.distribution = new Float32Array( positionAttribute.count / 3 );\n\n\t\tlet cumulativeTotal = 0;\n\n\t\tfor ( let i = 0; i < faceWeights.length; i ++ ) {\n\n\t\t\tcumulativeTotal += faceWeights[ i ];\n\n\t\t\tthis.distribution[ i ] = cumulativeTotal;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetRandomGenerator( randomFunction ) {\n\n\t\tthis.randomFunction = randomFunction;\n\t\treturn this;\n\n\t}\n\n\tsample( targetPosition, targetNormal, targetColor ) {\n\n\t\tconst faceIndex = this.sampleFaceIndex();\n\t\treturn this.sampleFace( faceIndex, targetPosition, targetNormal, targetColor );\n\n\t}\n\n\tsampleFaceIndex() {\n\n\t\tconst cumulativeTotal = this.distribution[ this.distribution.length - 1 ];\n\t\treturn this.binarySearch( this.randomFunction() * cumulativeTotal );\n\n\t}\n\n\tbinarySearch( x ) {\n\n\t\tconst dist = this.distribution;\n\t\tlet start = 0;\n\t\tlet end = dist.length - 1;\n\n\t\tlet index = - 1;\n\n\t\twhile ( start <= end ) {\n\n\t\t\tconst mid = Math.ceil( ( start + end ) / 2 );\n\n\t\t\tif ( mid === 0 || dist[ mid - 1 ] <= x && dist[ mid ] > x ) {\n\n\t\t\t\tindex = mid;\n\n\t\t\t\tbreak;\n\n\t\t\t} else if ( x < dist[ mid ] ) {\n\n\t\t\t\tend = mid - 1;\n\n\t\t\t} else {\n\n\t\t\t\tstart = mid + 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn index;\n\n\t}\n\n\tsampleFace( faceIndex, targetPosition, targetNormal, targetColor ) {\n\n\t\tlet u = this.randomFunction();\n\t\tlet v = this.randomFunction();\n\n\t\tif ( u + v > 1 ) {\n\n\t\t\tu = 1 - u;\n\t\t\tv = 1 - v;\n\n\t\t}\n\n\t\t_face.a.fromBufferAttribute( this.positionAttribute, faceIndex * 3 );\n\t\t_face.b.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 1 );\n\t\t_face.c.fromBufferAttribute( this.positionAttribute, faceIndex * 3 + 2 );\n\n\t\ttargetPosition\n\t\t\t.set( 0, 0, 0 )\n\t\t\t.addScaledVector( _face.a, u )\n\t\t\t.addScaledVector( _face.b, v )\n\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\tif ( targetNormal !== undefined ) {\n\n\t\t\t_face.getNormal( targetNormal );\n\n\t\t}\n\n\t\tif ( targetColor !== undefined && this.colorAttribute !== undefined ) {\n\n\t\t\t_face.a.fromBufferAttribute( this.colorAttribute, faceIndex * 3 );\n\t\t\t_face.b.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 1 );\n\t\t\t_face.c.fromBufferAttribute( this.colorAttribute, faceIndex * 3 + 2 );\n\n\t\t\t_color\n\t\t\t\t.set( 0, 0, 0 )\n\t\t\t\t.addScaledVector( _face.a, u )\n\t\t\t\t.addScaledVector( _face.b, v )\n\t\t\t\t.addScaledVector( _face.c, 1 - ( u + v ) );\n\n\t\t\ttargetColor.r = _color.x;\n\t\t\ttargetColor.g = _color.y;\n\t\t\ttargetColor.b = _color.z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { MeshSurfaceSampler };\n"],"names":["$ilwiq","parcelRequire","$6ad73aa5bbba7cf7$var$_face","Triangle","$6ad73aa5bbba7cf7$var$_color","Vector3","$6ad73aa5bbba7cf7$export$45494d519eb31ab","constructor","mesh","geometry","index","console","warn","toNonIndexed","this","randomFunction","Math","random","positionAttribute","getAttribute","colorAttribute","weightAttribute","distribution","setWeightAttribute","name","build","faceWeights","Float32Array","count","i","faceWeight","getX","a","fromBufferAttribute","b","c","getArea","cumulativeTotal","i1","length","setRandomGenerator","sample","targetPosition","targetNormal","targetColor","faceIndex","sampleFaceIndex","sampleFace","binarySearch","x","dist","start","end","mid","ceil","u","v","set","addScaledVector","undefined","getNormal","r","g","y","z","$ab16bf80078dbe17$var$params","operation","$4CEV9","SUBTRACTION","wireframe","displayBrushes","shadows","useGroups","randomize","$ab16bf80078dbe17$var$randomizeBrushes","$ab16bf80078dbe17$var$updateCSG","$ab16bf80078dbe17$var$renderer","$ab16bf80078dbe17$var$camera","$ab16bf80078dbe17$var$scene","$ab16bf80078dbe17$var$controls","$ab16bf80078dbe17$var$gui","$ab16bf80078dbe17$var$outputContainer","$ab16bf80078dbe17$var$bunnyBrush","$ab16bf80078dbe17$var$brushes","$ab16bf80078dbe17$var$material","$ab16bf80078dbe17$var$surfaceSampler","$ab16bf80078dbe17$var$resultObject","$ab16bf80078dbe17$var$wireframeResult","$ab16bf80078dbe17$var$light","$ab16bf80078dbe17$var$csgEvaluator","Evaluator","attributes","$ab16bf80078dbe17$var$materialMap","Map","startTime","window","performance","now","finalBrush","l","evaluate","ADDITION","material","map","m","get","deltaTime","innerText","toFixed","position","applyMatrix4","matrixWorld","scale","setScalar","MathUtils","lerp","updateMatrixWorld","$ab16bf80078dbe17$var$render","requestAnimationFrame","visible","forEach","castShadow","render","async","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","body","appendChild","domElement","Scene","DirectionalLight","add","AmbientLight","shadowCam","shadow","camera","mapSize","bias","normalBias","left","bottom","right","top","updateProjectionMatrix","PerspectiveCamera","far","$5Rd1x","OrbitControls","floor","Mesh","PlaneBufferGeometry","ShadowMaterial","opacity","color","rotation","PI","receiveShadow","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","scene","children","computeVertexNormals","Brush","MeshStandardMaterial","SphereBufferGeometry","push","mat","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","DoubleSide","premultipliedAlpha","roughness","clone","BufferGeometry","flatShading","MeshBasicMaterial","$jiuw3","GUI","INTERSECTION","DIFFERENCE","onChange","addEventListener","aspect","$ab16bf80078dbe17$var$init"],"version":3,"file":"geometry.11133ed7.js.map"}