{"mappings":"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","sources":["examples/debug.js"],"sourcesContent":["import * as THREE from 'three';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { MeshoptDecoder } from 'three/examples/jsm/libs/meshopt_decoder.module.js';\nimport { MeshBVHVisualizer } from 'three-mesh-bvh';\nimport {\n\tBrush,\n\tEvaluator,\n\tEdgesHelper,\n\tTriangleSetHelper,\n\tlogTriangleDefinitions,\n\tGridMaterial,\n\tADDITION,\n\tSUBTRACTION,\n\tINTERSECTION,\n\tDIFFERENCE,\n} from '..';\n\nwindow.logTriangleDefinitions = logTriangleDefinitions;\n\nconst OPERATION = SUBTRACTION;\n\nconst params = {\n\n\tdisplayBrushes: true,\n\twireframe: false,\n\tenableDebugTelemetry: true,\n\tdisplayIntersectionEdges: false,\n\tdisplayTriangleIntersections: false,\n\tdisplayBrush1BVH: false,\n\tdisplayBrush2BVH: false,\n\n};\n\nlet renderer, camera, scene, gui, outputContainer;\nlet controls;\nlet brush1, brush2;\nlet resultObject, wireframeResult, light, light2, originalMaterial;\nlet edgesHelper, trisHelper;\nlet bvhHelper1, bvhHelper2;\nlet bunnyGeom;\nlet needsUpdate = true;\nlet csgEvaluator;\n\nconst materialMap = new Map();\n\ninit();\n\nasync function init() {\n\n\tconst bgColor = 0x111111;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// lights\n\tlight = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( - 1, 2, 3 );\n\n\tlight2 = new THREE.DirectionalLight( 0xffffff, 0.25 );\n\tlight2.position.set( - 1, 2, 3 ).multiplyScalar( - 1 );\n\n\tscene.add( light, light2 );\n\tscene.add( new THREE.AmbientLight( 0xb0bec5, 0.1 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 1, 2, 4 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// controls\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\t// bunny mesh has no UVs so skip that attribute\n\tcsgEvaluator = new Evaluator();\n\tcsgEvaluator.attributes = [ 'position', 'normal' ];\n\n\t// initialize brushes\n\tbrush1 = new Brush( new THREE.CylinderGeometry( 1, 1, 1, 50 ), new GridMaterial() );\n\tbrush2 = new Brush( new THREE.CylinderGeometry( 1, 1, 1, 50 ), new GridMaterial() );\n\t// brush2.position.set( - 0.75, 0.75, 0 );\n\t// brush2.scale.setScalar( 0.75 );\n\n\tbrush1.scale.set( 0.5, 5, 0.5 );\n\tbrush2.scale.set( 0.5, 5, 0.5 );\n\tbrush2.rotation.x = Math.PI / 2;\n\n\t// initialize materials\n\tbrush1.material.opacity = 0.15;\n\tbrush1.material.transparent = true;\n\tbrush1.material.depthWrite = false;\n\tbrush1.material.polygonOffset = true;\n\tbrush1.material.polygonOffsetFactor = 0.2;\n\tbrush1.material.polygonOffsetUnits = 0.2;\n\tbrush1.material.side = THREE.DoubleSide;\n\tbrush1.material.premultipliedAlpha = true;\n\n\tbrush2.material.opacity = 0.15;\n\tbrush2.material.transparent = true;\n\tbrush2.material.depthWrite = false;\n\tbrush2.material.polygonOffset = true;\n\tbrush2.material.polygonOffsetFactor = 0.2;\n\tbrush2.material.polygonOffsetUnits = 0.2;\n\tbrush2.material.side = THREE.DoubleSide;\n\tbrush2.material.premultipliedAlpha = true;\n\tbrush2.material.roughness = 0.25;\n\tbrush2.material.color.set( 0xE91E63 );\n\n\tscene.add( brush1, brush2 );\n\n\t// create material map for transparent to opaque variants\n\tlet mat;\n\tmat = brush1.material.clone();\n\tmat.side = THREE.FrontSide;\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( brush1.material, mat );\n\n\tmat = brush2.material.clone();\n\tmat.side = THREE.FrontSide;\n\tmat.opacity = 1;\n\tmat.transparent = false;\n\tmat.depthWrite = true;\n\tmaterialMap.set( brush2.material, mat );\n\n\tmaterialMap.forEach( ( m1, m2 ) => {\n\n\t\tm1.enableGrid = false;\n\t\tm2.enableGrid = false;\n\n\t} );\n\n\t// add object displaying the result\n\tresultObject = new THREE.Mesh( new THREE.BufferGeometry(), new THREE.MeshStandardMaterial( {\n\t\tflatShading: false,\n\t\tpolygonOffset: true,\n\t\tpolygonOffsetUnits: 0.1,\n\t\tpolygonOffsetFactor: 0.1,\n\t} ) );\n\toriginalMaterial = resultObject.material;\n\tscene.add( resultObject );\n\n\t// add wireframe representation\n\twireframeResult = new THREE.Mesh( resultObject.geometry, new THREE.MeshBasicMaterial( {\n\t\twireframe: true,\n\t\tcolor: 0xffffff,\n\t\topacity: 1,\n\t\ttransparent: true,\n\t} ) );\n\tscene.add( wireframeResult );\n\n\t// helpers\n\tedgesHelper = new EdgesHelper();\n\tedgesHelper.color.set( 0x00ff00 );\n\tscene.add( edgesHelper );\n\n\ttrisHelper = new TriangleSetHelper();\n\ttrisHelper.color.set( 0x00BCD4 );\n\tscene.add( trisHelper );\n\n\tbvhHelper1 = new MeshBVHVisualizer( brush1, 20 );\n\tbvhHelper2 = new MeshBVHVisualizer( brush2, 20 );\n\tscene.add( bvhHelper1, bvhHelper2 );\n\n\t// load bunny geometry\n\tconst gltf = await new GLTFLoader()\n\t\t.setMeshoptDecoder( MeshoptDecoder )\n\t\t.loadAsync( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/stanford-bunny/bunny.glb' );\n\n\tbunnyGeom = gltf.scene.children[ 0 ].geometry;\n\tbunnyGeom.computeVertexNormals();\n\n\t// gui\n\tgui = new GUI();\n\n\tgui.add( params, 'wireframe' );\n\tgui.add( params, 'displayBrushes' );\n\tgui.add( params, 'enableDebugTelemetry' ).onChange( () => needsUpdate = true );\n\tgui.add( params, 'displayIntersectionEdges' );\n\tgui.add( params, 'displayTriangleIntersections' );\n\tgui.add( params, 'displayBrush1BVH' );\n\tgui.add( params, 'displayBrush2BVH' );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\trender();\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tconst enableDebugTelemetry = params.enableDebugTelemetry;\n\tif ( needsUpdate ) {\n\n\t\tneedsUpdate = false;\n\n\t\tbrush1.updateMatrixWorld();\n\t\tbrush2.updateMatrixWorld();\n\n\t\tbvhHelper1.update();\n\t\tbvhHelper2.update();\n\n\t\tconst startTime = window.performance.now();\n\t\tcsgEvaluator.debug.enabled = enableDebugTelemetry;\n\t\tcsgEvaluator.useGroups = true;\n\t\tcsgEvaluator.evaluate( brush1, brush2, OPERATION, resultObject );\n\t\tresultObject.material = resultObject.material.map( m => materialMap.get( m ) );\n\n\t\tconst deltaTime = window.performance.now() - startTime;\n\t\toutputContainer.innerText = `${ deltaTime.toFixed( 3 ) }ms`;\n\n\t\tif ( enableDebugTelemetry ) {\n\n\t\t\tedgesHelper.setEdges( csgEvaluator.debug.intersectionEdges );\n\n\t\t\ttrisHelper.setTriangles( [\n\t\t\t\t...csgEvaluator.debug.triangleIntersectsA.getTrianglesAsArray(),\n\t\t\t\t...csgEvaluator.debug.triangleIntersectsA.getIntersectionsAsArray()\n\t\t\t] );\n\n\t\t}\n\n\t}\n\n\t// window.CSG_DEBUG = csgEvaluator.debug;\n\t// if ( window.TRI !== undefined ) {\n\n\t// \ttrisHelper.setTriangles( [\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getTrianglesAsArray( window.TRI ),\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getIntersectionsAsArray( window.TRI )\n\t// \t] );\n\n\t// \tlogTriangleDefinitions(\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getTrianglesAsArray( window.TRI ),\n\t// \t\t...csgEvaluator.debug.triangleIntersectsA.getIntersectionsAsArray( window.TRI )\n\t// \t);\n\n\t// }\n\n\twireframeResult.visible = params.wireframe;\n\n\tedgesHelper.visible = enableDebugTelemetry && params.displayIntersectionEdges;\n\ttrisHelper.visible = enableDebugTelemetry && params.displayTriangleIntersections;\n\n\tbvhHelper1.visible = params.displayBrush1BVH;\n\tbvhHelper2.visible = params.displayBrush2BVH;\n\n\tbrush1.visible = params.displayBrushes;\n\tbrush2.visible = params.displayBrushes;\n\n\trenderer.render( scene, camera );\n\n}\n\n\n\n"],"names":["$ilwiq","parcelRequire","window","logTriangleDefinitions","$4CEV9","$9509d0dafaf2b786$var$OPERATION","SUBTRACTION","$9509d0dafaf2b786$var$params","displayBrushes","wireframe","enableDebugTelemetry","displayIntersectionEdges","displayTriangleIntersections","displayBrush1BVH","displayBrush2BVH","$9509d0dafaf2b786$var$renderer","$9509d0dafaf2b786$var$camera","$9509d0dafaf2b786$var$scene","$9509d0dafaf2b786$var$gui","$9509d0dafaf2b786$var$outputContainer","$9509d0dafaf2b786$var$controls","$9509d0dafaf2b786$var$brush1","$9509d0dafaf2b786$var$brush2","$9509d0dafaf2b786$var$resultObject","$9509d0dafaf2b786$var$wireframeResult","$9509d0dafaf2b786$var$light","$9509d0dafaf2b786$var$light2","$9509d0dafaf2b786$var$originalMaterial","$9509d0dafaf2b786$var$edgesHelper","$9509d0dafaf2b786$var$trisHelper","$9509d0dafaf2b786$var$bvhHelper1","$9509d0dafaf2b786$var$bvhHelper2","$9509d0dafaf2b786$var$bunnyGeom","$9509d0dafaf2b786$var$csgEvaluator","$9509d0dafaf2b786$var$needsUpdate","$9509d0dafaf2b786$var$materialMap","Map","$9509d0dafaf2b786$var$render","requestAnimationFrame","updateMatrixWorld","update","startTime","performance","now","debug","enabled","useGroups","evaluate","material","map","m","get","deltaTime","innerText","toFixed","setEdges","intersectionEdges","setTriangles","triangleIntersectsA","getTrianglesAsArray","getIntersectionsAsArray","visible","render","async","mat","document","getElementById","WebGLRenderer","antialias","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","setClearColor","body","appendChild","domElement","Scene","DirectionalLight","position","set","multiplyScalar","add","AmbientLight","PerspectiveCamera","far","updateProjectionMatrix","$5Rd1x","OrbitControls","Evaluator","attributes","Brush","CylinderGeometry","GridMaterial","scale","rotation","x","Math","PI","opacity","transparent","depthWrite","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","side","DoubleSide","premultipliedAlpha","roughness","color","clone","FrontSide","forEach","m1","m2","enableGrid","Mesh","BufferGeometry","MeshStandardMaterial","flatShading","geometry","MeshBasicMaterial","EdgesHelper","TriangleSetHelper","$8Zfx2","MeshBVHVisualizer","gltf","$7lx9d","GLTFLoader","setMeshoptDecoder","$kp7Te","MeshoptDecoder","loadAsync","scene","children","computeVertexNormals","$jiuw3","GUI","onChange","addEventListener","aspect","$9509d0dafaf2b786$var$init"],"version":3,"file":"debug.99c8aa33.js.map"}